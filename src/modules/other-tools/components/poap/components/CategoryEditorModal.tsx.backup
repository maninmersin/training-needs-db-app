import React, { useState, useEffect } from 'react';
import type { Swimlane, MilestoneData } from '../types';
import { usePlanStore } from '../state/usePlanStore';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';

interface CategoryEditorModalProps {
  isOpen: boolean;
  swimlane: Swimlane | null;
  onSave: (updates: Partial<Swimlane>) => void;
  onCancel: () => void;
}

export default function CategoryEditorModal({ 
  isOpen, 
  swimlane, 
  onSave, 
  onCancel 
}: CategoryEditorModalProps) {
  // Access the current plan and store methods
  const { currentPlan, addSubCategory, updateSwimlane, deleteSwimlane } = usePlanStore();
  
  // Main category form state
  const [title, setTitle] = useState('');
  const [backgroundColor, setBackgroundColor] = useState('#4A90A4');
  const [textColor, setTextColor] = useState('#FFFFFF');
  const [fontSize, setFontSize] = useState(16);
  const [fontWeight, setFontWeight] = useState<'normal' | 'medium' | 'semibold' | 'bold'>('bold');
  const [fontFamily, setFontFamily] = useState('Inter');
  const [color, setColor] = useState('#4A90A4');
  const [isMainCategory, setIsMainCategory] = useState(false);
  const [parentId, setParentId] = useState<string>('');

  // Milestone state
  const [hasMilestone, setHasMilestone] = useState(false);
  const [milestoneTitle, setMilestoneTitle] = useState('');
  const [milestoneDate, setMilestoneDate] = useState('');
  const [milestoneColor, setMilestoneColor] = useState('#F59E0B');

  // Sub-category management state
  const [editingSubCategory, setEditingSubCategory] = useState<Swimlane | null>(null);
  const [newSubCategoryTitle, setNewSubCategoryTitle] = useState('');
  const [subCategoryFormData, setSubCategoryFormData] = useState({
    title: '',
    backgroundColor: '#E1F1F5',
    textColor: '#2C5F6B',
    fontSize: 14,
    fontWeight: 'medium' as 'normal' | 'medium' | 'semibold' | 'bold',
    fontFamily: 'Inter'
  });

  // Predefined color options
  const colorOptions = [
    { name: 'Blue', value: '#4A90A4' },
    { name: 'Gray', value: '#666666' },
    { name: 'Green', value: '#5C8A5C' },
    { name: 'Purple', value: '#7C3AED' },
    { name: 'Red', value: '#DC2626' },
    { name: 'Orange', value: '#EA580C' },
    { name: 'Teal', value: '#0D9488' },
    { name: 'Pink', value: '#DB2777' }
  ];

  const milestoneColorOptions = [
    { name: 'Amber', value: '#F59E0B' },
    { name: 'Blue', value: '#3B82F6' },
    { name: 'Green', value: '#10B981' },
    { name: 'Red', value: '#EF4444' },
    { name: 'Purple', value: '#8B5CF6' },
    { name: 'Pink', value: '#EC4899' },
    { name: 'Gray', value: '#6B7280' },
    { name: 'Teal', value: '#14B8A6' }
  ];

  const textColorOptions = [
    { name: 'White', value: '#FFFFFF' },
    { name: 'Black', value: '#000000' },
    { name: 'Dark Gray', value: '#374151' },
    { name: 'Light Gray', value: '#9CA3AF' }
  ];

  // Sub-category specific color options (lighter, complementary colors)
  const subCategoryColorOptions = [
    { name: 'Light Blue', value: '#E1F1F5', textColor: '#2C5F6B' },
    { name: 'Light Green', value: '#E8F5E8', textColor: '#2D5A2D' },
    { name: 'Light Purple', value: '#F0E7FF', textColor: '#4C1D95' },
    { name: 'Light Orange', value: '#FFF3E0', textColor: '#E65100' },
    { name: 'Light Red', value: '#FFEBEE', textColor: '#C62828' },
    { name: 'Light Teal', value: '#E0F2F1', textColor: '#00695C' },
    { name: 'Light Pink', value: '#FCE4EC', textColor: '#AD1457' },
    { name: 'Light Gray', value: '#F5F5F5', textColor: '#424242' }
  ];

  const fontOptions = [
    { value: 'Inter', label: 'Inter' },
    { value: 'Roboto', label: 'Roboto' },
    { value: 'Arial', label: 'Arial' },
    { value: 'system-ui', label: 'System UI' },
    { value: 'Helvetica Neue', label: 'Helvetica Neue' }
  ];

  const fontWeightOptions = [
    { value: 'normal' as const, label: 'Normal' },
    { value: 'medium' as const, label: 'Medium' },
    { value: 'semibold' as const, label: 'Semi-Bold' },
    { value: 'bold' as const, label: 'Bold' }
  ];

  // Initialize form when modal opens
  useEffect(() => {
    if (isOpen && swimlane) {
      setTitle(swimlane.title);
      setBackgroundColor(swimlane.backgroundColor || '#4A90A4');
      setTextColor(swimlane.textColor || '#FFFFFF');
      setFontSize(swimlane.fontSize || 16);
      setFontWeight(swimlane.fontWeight || 'bold');
      setFontFamily(swimlane.fontFamily || 'Inter');
      setColor(swimlane.color || '#4A90A4');
      setIsMainCategory(swimlane.isMainCategory || false);
      setParentId(swimlane.parentId || '');
      
      // Initialize milestone data
      if (swimlane.milestone) {
        setHasMilestone(true);
        setMilestoneTitle(swimlane.milestone.title);
        setMilestoneDate(swimlane.milestone.date.toISOString().split('T')[0]);
        setMilestoneColor(swimlane.milestone.color);
      } else {
        setHasMilestone(false);
        setMilestoneTitle('');
        setMilestoneDate(new Date().toISOString().split('T')[0]);
        setMilestoneColor('#F59E0B');
      }
    }
  }, [isOpen, swimlane]);


  // Handle save
  const handleSave = () => {
    if (!title.trim()) return;

    // Prepare milestone data
    let milestoneData: MilestoneData | undefined = undefined;
    if (hasMilestone && milestoneTitle.trim()) {
      milestoneData = {
        title: milestoneTitle.trim(),
        date: new Date(milestoneDate),
        color: milestoneColor
      };
    }

    const updates: Partial<Swimlane> = {
      title: title.trim(),
      backgroundColor,
      textColor,
      fontSize,
      fontWeight,
      fontFamily,
      color,
      isMainCategory,
      parentId: isMainCategory ? undefined : (parentId || undefined),
      level: isMainCategory ? 0 : 1,
      hasChildren: isMainCategory,
      milestone: milestoneData
    };

    onSave(updates);
  };

  // Reset form and close
  const handleCancel = () => {
    if (swimlane) {
      setTitle(swimlane.title);
      setBackgroundColor(swimlane.backgroundColor || '#4A90A4');
      setTextColor(swimlane.textColor || '#FFFFFF');
      setFontSize(swimlane.fontSize || 16);
      setFontWeight(swimlane.fontWeight || 'bold');
      setFontFamily(swimlane.fontFamily || 'Inter');
      setColor(swimlane.color || '#4A90A4');
      setIsMainCategory(swimlane.isMainCategory || false);
      setParentId(swimlane.parentId || '');
      
      // Reset milestone data
      if (swimlane.milestone) {
        setHasMilestone(true);
        setMilestoneTitle(swimlane.milestone.title);
        setMilestoneDate(swimlane.milestone.date.toISOString().split('T')[0]);
        setMilestoneColor(swimlane.milestone.color);
      } else {
        setHasMilestone(false);
        setMilestoneTitle('');
        setMilestoneDate(new Date().toISOString().split('T')[0]);
        setMilestoneColor('#F59E0B');
      }
    }
    onCancel();
  };
  
  // Get available parent categories (main categories only)
  const availableParents = currentPlan?.swimlanes
    .filter(s => s.isMainCategory && s.id !== swimlane?.id)
    .sort((a, b) => a.order - b.order) || [];

  // Get sub-categories for current main category
  const subCategories = currentPlan?.swimlanes
    .filter(s => s.parentId === swimlane?.id)
    .sort((a, b) => a.order - b.order) || [];

  // Sub-category management functions
  const handleAddSubCategory = () => {
    if (!swimlane?.id || !newSubCategoryTitle.trim()) return;
    
    addSubCategory(swimlane.id, newSubCategoryTitle.trim());
    setNewSubCategoryTitle('');
  };

  const handleEditSubCategory = (subCategory: Swimlane) => {
    setEditingSubCategory(subCategory);
    setSubCategoryFormData({
      title: subCategory.title,
      backgroundColor: subCategory.backgroundColor || '#E1F1F5',
      textColor: subCategory.textColor || '#2C5F6B',
      fontSize: subCategory.fontSize || 14,
      fontWeight: (subCategory.fontWeight as 'normal' | 'medium' | 'semibold' | 'bold') || 'medium',
      fontFamily: subCategory.fontFamily || 'Inter'
    });
  };

  const handleSaveSubCategory = () => {
    if (!editingSubCategory) return;
    
    updateSwimlane(editingSubCategory.id, subCategoryFormData);
    setEditingSubCategory(null);
  };

  const handleDeleteSubCategory = (subCategoryId: string) => {
    if (confirm('Are you sure you want to delete this sub-category? All associated cards and milestones will be removed.')) {
      deleteSwimlane(subCategoryId);
    }
  };

  const resetSubCategoryForm = () => {
    setSubCategoryFormData({
      title: '',
      backgroundColor: '#E1F1F5',
      textColor: '#2C5F6B',
      fontSize: 14,
      fontWeight: 'medium',
      fontFamily: 'Inter'
    });
    setEditingSubCategory(null);
  };

  return (
    <Dialog open={isOpen} onOpenChange={onCancel}>
      <DialogContent 
        className="!max-w-3xl max-h-[80vh] overflow-y-auto !w-auto border-2 border-gray-300"
        style={{ 
          maxWidth: '768px !important',
          width: '90vw',
          maxHeight: '80vh',
          padding: '32px !important'
        }}
      >
        <DialogHeader>
          <DialogTitle className="text-2xl font-bold">
            {swimlane?.isMainCategory ? 'Manage Main Category' : 'Edit Sub-Category'}
          </DialogTitle>
          <DialogDescription className="text-sm mt-1">
            {swimlane?.isMainCategory 
              ? 'Edit main category details and manage sub-categories' 
              : 'Customize the sub-category appearance and details'
            }
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-8 mt-6">
          {/* Basic Info */}
          <div className="bg-gray-50 p-6 rounded-lg space-y-4">
            <h3 className="text-lg font-bold text-gray-800 flex items-center">
              <span className="w-1 h-6 bg-blue-600 mr-3 rounded"></span>
              Basic Information
            </h3>
            
            {/* Category Title */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">Category Title</label>
              <Input
                type="text"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                placeholder="Category name..."
                className="text-base"
              />
            </div>
          </div>

          {/* Sub-Category Management - Only show for main categories */}
          {swimlane?.isMainCategory && (
            <div className="bg-green-50 p-6 rounded-lg space-y-6">
              <h3 className="text-lg font-bold text-gray-800 flex items-center">
                <span className="w-1 h-6 bg-green-600 mr-3 rounded"></span>
                Sub-Category Management
              </h3>
              
              {/* Add New Sub-Category */}
              <div className="bg-gray-50 p-4 rounded-lg">
                <h4 className="font-semibold text-gray-600 mb-2">Add New Sub-Category</h4>
                <div className="flex gap-2">
                  <Input
                    type="text"
                    placeholder="Sub-category name..."
                    value={newSubCategoryTitle}
                    onChange={(e) => setNewSubCategoryTitle(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && handleAddSubCategory()}
                    className="flex-1"
                  />
                  <Button 
                    onClick={handleAddSubCategory} 
                    disabled={!newSubCategoryTitle.trim()}
                    className="whitespace-nowrap"
                  >
                    Add Sub-Category
                  </Button>
                </div>
              </div>

              {/* Existing Sub-Categories List */}
              <div className="space-y-2">
                <h4 className="font-semibold text-gray-600">Existing Sub-Categories ({subCategories.length})</h4>
                {subCategories.length === 0 ? (
                  <p className="text-gray-500 italic py-4 text-center border border-dashed border-gray-300 rounded-lg">
                    No sub-categories yet. Add one above to get started.
                  </p>
                ) : (
                  <div className="space-y-2">
                    {subCategories.map((subCategory) => (
                      <div 
                        key={subCategory.id} 
                        className="flex items-center justify-between p-3 border border-gray-200 rounded-lg bg-white hover:bg-gray-50 transition-colors"
                      >
                        <div className="flex items-center space-x-3">
                          <div 
                            className="w-4 h-4 rounded"
                            style={{ backgroundColor: subCategory.backgroundColor }}
                            title={`Background: ${subCategory.backgroundColor}`}
                          />
                          <div>
                            <div className="font-medium text-gray-900">{subCategory.title}</div>
                          </div>
                        </div>
                        <div className="flex space-x-2">
                          <Button
                            onClick={() => handleEditSubCategory(subCategory)}
                            variant="outline"
                            size="sm"
                          >
                            Edit
                          </Button>
                          <Button
                            onClick={() => handleDeleteSubCategory(subCategory.id)}
                            variant="outline"
                            size="sm"
                            className="text-red-600 hover:text-red-700 hover:bg-red-50"
                          >
                            Delete
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Sub-Category Edit Form - Show when editing a sub-category */}
          {editingSubCategory && (
            <div className="bg-orange-50 p-6 rounded-lg space-y-6 border-l-4 border-orange-400">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-bold text-gray-800 flex items-center">
                  <span className="w-1 h-6 bg-orange-600 mr-3 rounded"></span>
                  Editing Sub-Category: {editingSubCategory.title}
                </h3>
                <Button onClick={resetSubCategoryForm} variant="outline" size="sm">
                  Cancel
                </Button>
              </div>
              
              <div className="bg-white p-5 rounded-lg shadow-sm space-y-5 border border-orange-200">
                {/* Sub-category Basic Info */}
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">Sub-Category Title</label>
                  <Input
                    type="text"
                    value={subCategoryFormData.title}
                    onChange={(e) => setSubCategoryFormData(prev => ({ ...prev, title: e.target.value }))}
                    placeholder="Sub-category name..."
                  />
                </div>

                {/* Sub-category Styling - Simplified */}
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">Choose Color Theme</label>
                    <p className="text-xs text-gray-500 mb-3">Select a complementary color theme for this sub-category</p>
                    <div className="grid grid-cols-4 gap-3">
                      {subCategoryColorOptions.map((colorOption) => (
                        <button
                          key={colorOption.value}
                          onClick={() => setSubCategoryFormData(prev => ({ 
                            ...prev, 
                            backgroundColor: colorOption.value,
                            textColor: colorOption.textColor 
                          }))}
                          className={`p-3 rounded-lg border-2 transition-all hover:scale-105 ${
                            subCategoryFormData.backgroundColor === colorOption.value 
                              ? 'border-blue-500 shadow-md' 
                              : 'border-gray-200 hover:border-gray-300'
                          }`}
                          style={{ 
                            backgroundColor: colorOption.value,
                            color: colorOption.textColor
                          }}
                        >
                          <div className="text-xs font-medium">{colorOption.name}</div>
                          <div className="text-xs opacity-75 mt-1">Sample</div>
                        </button>
                      ))}
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-semibold text-gray-700 mb-2">Font Weight</label>
                      <select
                        value={subCategoryFormData.fontWeight}
                        onChange={(e) => setSubCategoryFormData(prev => ({ ...prev, fontWeight: e.target.value as 'normal' | 'medium' | 'semibold' | 'bold' }))}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                      >
                        <option value="normal">Normal</option>
                        <option value="medium">Medium</option>
                        <option value="semibold">Semi-Bold</option>
                        <option value="bold">Bold</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm font-semibold text-gray-700 mb-2">Font Size: {subCategoryFormData.fontSize}px</label>
                      <input
                        type="range"
                        min="10"
                        max="16"
                        value={subCategoryFormData.fontSize}
                        onChange={(e) => setSubCategoryFormData(prev => ({ ...prev, fontSize: Number(e.target.value) }))}
                        className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                      />
                    </div>
                  </div>
                </div>

                <div className="flex justify-end space-x-2 pt-2">
                  <Button onClick={resetSubCategoryForm} variant="outline">
                    Cancel
                  </Button>
                  <Button onClick={handleSaveSubCategory}>
                    Save Sub-Category
                  </Button>
                </div>
              </div>
            </div>
          )}

          {/* Main Category Appearance */}
          <div className="bg-purple-50 p-6 rounded-lg space-y-6">
            <div>
              <h3 className="text-lg font-bold text-gray-800 flex items-center">
                <span className="w-1 h-6 bg-purple-600 mr-3 rounded"></span>
                {swimlane?.isMainCategory ? 'Main Category Styling' : 'Category Styling'}
              </h3>
              {swimlane?.isMainCategory && (
                <p className="text-sm text-gray-600 mt-2 ml-4">
                  Configure the bold, prominent styling for this main category header
                </p>
              )}
            </div>
            
            {/* Background Color */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">Background Color</label>
                <div className="flex flex-wrap gap-3 mb-4">
                  {colorOptions.map((color) => (
                    <button
                      key={color.value}
                      onClick={() => setBackgroundColor(color.value)}
                      className={`rounded-lg transition-all hover:scale-105 ${
                        backgroundColor === color.value ? 'shadow-lg' : 'hover:shadow-md'
                      }`}
                      style={{ 
                        backgroundColor: color.value,
                        width: '24px',
                        height: '24px',
                        border: backgroundColor === color.value ? '2px solid #374151' : '1px solid #d1d5db'
                      }}
                      title={color.name}
                    />
                  ))}
                </div>
                <input
                  type="color"
                  value={backgroundColor}
                  onChange={(e) => setBackgroundColor(e.target.value)}
                  className="w-full h-12 rounded-lg border-2 border-gray-300 cursor-pointer"
                />
              </div>

              {/* Text Color */}
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">Text Color</label>
                <div className="flex flex-wrap gap-3 mb-4">
                  {textColorOptions.map((color) => (
                    <button
                      key={color.value}
                      onClick={() => setTextColor(color.value)}
                      className={`rounded-lg transition-all hover:scale-105 ${
                        textColor === color.value ? 'shadow-lg' : 'hover:shadow-md'
                      }`}
                      style={{ 
                        backgroundColor: color.value,
                        width: '24px',
                        height: '24px',
                        border: textColor === color.value ? '2px solid #3b82f6' : '1px solid #d1d5db'
                      }}
                      title={color.name}
                    />
                  ))}
                </div>
                <input
                  type="color"
                  value={textColor}
                  onChange={(e) => setTextColor(e.target.value)}
                  className="w-full h-12 rounded-lg border-2 border-gray-300 cursor-pointer"
                />
              </div>

            {/* Typography Settings */}
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">Font Family</label>
                <select
                  value={fontFamily}
                  onChange={(e) => setFontFamily(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  {fontOptions.map((font) => (
                    <option key={font.value} value={font.value}>{font.label}</option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">Font Weight</label>
                <select
                  value={fontWeight}
                  onChange={(e) => setFontWeight(e.target.value as 'normal' | 'medium' | 'semibold' | 'bold')}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  {fontWeightOptions.map((weight) => (
                    <option key={weight.value} value={weight.value}>{weight.label}</option>
                  ))}
                </select>
              </div>
            </div>

            {/* Font Size */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                Font Size: {fontSize}px
              </label>
              <input
                type="range"
                min="12"
                max="24"
                value={fontSize}
                onChange={(e) => setFontSize(Number(e.target.value))}
                className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
              />
            </div>
          </div>

          {/* Milestone Section */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-gray-700 border-b border-gray-200 pb-2">Swimlane Milestone</h3>
            
            {/* Milestone Toggle */}
            <div className="flex items-center space-x-3">
              <input
                type="checkbox"
                id="hasMilestone"
                checked={hasMilestone}
                onChange={(e) => setHasMilestone(e.target.checked)}
                className="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
              />
              <label htmlFor="hasMilestone" className="text-sm font-medium text-gray-700">
                Add milestone to this swimlane
              </label>
            </div>

            {/* Milestone Fields - only show when enabled */}
            {hasMilestone && (
              <div className="space-y-4 pl-7">
                {/* Milestone Title */}
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">Milestone Title</label>
                  <Input
                    type="text"
                    value={milestoneTitle}
                    onChange={(e) => setMilestoneTitle(e.target.value)}
                    placeholder="Enter milestone name..."
                  />
                </div>

                {/* Milestone Date */}
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">Milestone Date</label>
                  <Input
                    type="date"
                    value={milestoneDate}
                    onChange={(e) => setMilestoneDate(e.target.value)}
                  />
                </div>

                {/* Milestone Color */}
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">Milestone Color</label>
                  <div className="flex flex-wrap gap-3 mb-4">
                    {milestoneColorOptions.map((colorOption) => (
                      <button
                        key={colorOption.value}
                        type="button"
                        onClick={() => setMilestoneColor(colorOption.value)}
                        className={`rounded-lg transition-all hover:scale-105 ${
                          milestoneColor === colorOption.value ? 'shadow-lg ring-2 ring-gray-400' : 'hover:shadow-md'
                        }`}
                        style={{ 
                          backgroundColor: colorOption.value,
                          width: '32px',
                          height: '32px',
                          border: milestoneColor === colorOption.value ? '2px solid #374151' : '1px solid #d1d5db'
                        }}
                        title={colorOption.name}
                      />
                    ))}
                  </div>
                  
                  {/* Custom color picker */}
                  <input
                    type="color"
                    value={milestoneColor}
                    onChange={(e) => setMilestoneColor(e.target.value)}
                    className="w-full h-12 rounded-lg border-2 border-gray-300 cursor-pointer"
                  />
                </div>

                {/* Milestone Preview */}
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">Preview</label>
                  <div className="flex items-center gap-3 p-4 bg-gray-50 border border-gray-200 rounded-lg">
                    <div className="milestone-marker" style={{ borderTopColor: milestoneColor }}>
                      <div className="milestone-label" style={{ backgroundColor: milestoneColor }}>
                        {milestoneTitle || 'Milestone Title'}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>

        </div>

        <DialogFooter className="gap-3 mt-8 pt-6 border-t border-gray-200">
          <Button onClick={handleCancel} variant="outline">
            Cancel
          </Button>
          <Button onClick={handleSave}>
            Save Changes
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}