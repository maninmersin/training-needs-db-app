import { useState, useEffect } from 'react';
import type { Milestone, Swimlane } from '../types';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';

interface MilestoneEditorModalProps {
  isOpen: boolean;
  milestone: Milestone | null;
  swimlanes: Swimlane[];
  onSave: (updates: Partial<Milestone>) => void;
  onCancel: () => void;
}

export default function MilestoneEditorModal({ 
  isOpen, 
  milestone, 
  swimlanes,
  onSave, 
  onCancel 
}: MilestoneEditorModalProps) {
  // Form state
  const [title, setTitle] = useState('');
  const [date, setDate] = useState('');
  const [color, setColor] = useState('#F59E0B');

  // Predefined color options
  const colorOptions = [
    { name: 'Amber', value: '#F59E0B' },
    { name: 'Blue', value: '#3B82F6' },
    { name: 'Green', value: '#10B981' },
    { name: 'Red', value: '#EF4444' },
    { name: 'Purple', value: '#8B5CF6' },
    { name: 'Pink', value: '#EC4899' },
    { name: 'Gray', value: '#6B7280' },
    { name: 'Teal', value: '#14B8A6' }
  ];

  // Initialize form when modal opens
  useEffect(() => {
    if (isOpen) {
      if (milestone) {
        console.log('Initializing with milestone:', milestone);
        setTitle(milestone.title);
        setDate(milestone.date.toISOString().split('T')[0]);
        setColor(milestone.color);
      } else {
        // New milestone - set defaults
        console.log('Initializing new milestone');
        setTitle('');
        setDate(new Date().toISOString().split('T')[0]);
        setColor('#F59E0B');
      }
    }
  }, [isOpen, milestone?.id]); // Only depend on modal opening and milestone ID change

  // Handle save
  const handleSave = () => {
    if (!title.trim()) return;

    const updates: Partial<Milestone> = {
      title: title.trim(),
      date: new Date(date),
      color
    };

    onSave(updates);
  };

  // Handle cancel
  const handleCancel = () => {
    if (milestone) {
      setTitle(milestone.title);
      setDate(milestone.date.toISOString().split('T')[0]);
      setColor(milestone.color);
    }
    onCancel();
  };

  return (
    <Dialog open={isOpen} onOpenChange={(open) => !open && onCancel()}>
      <DialogContent 
        className="max-h-[80vh] overflow-y-auto"
        style={{ maxWidth: '42rem', width: 'min(90vw, 42rem)' }}
      >
        <DialogHeader>
          <DialogTitle className="text-2xl font-bold">
            {milestone ? 'Edit Milestone' : 'Add New Milestone'}
          </DialogTitle>
          <DialogDescription className="text-sm mt-1">
            {milestone ? 'Update timeline milestone details' : 'Create a new timeline-wide milestone'}
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-6 mt-6">
          {/* Basic Info */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-gray-700 border-b border-gray-200 pb-2">Basic Information</h3>
            
            {/* Title */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">Title</label>
              <Input
                type="text"
                value={title}
                onChange={(e) => {
                  console.log('Title changing from:', title, 'to:', e.target.value);
                  setTitle(e.target.value);
                }}
                placeholder="Milestone title..."
                autoFocus
              />
              {!title.trim() && (
                <p className="text-red-500 text-xs mt-1">Title is required</p>
              )}
            </div>

            {/* Date */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">Date</label>
              <Input
                type="date"
                value={date}
                onChange={(e) => setDate(e.target.value)}
              />
            </div>

          </div>

          {/* Appearance */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-gray-700 border-b border-gray-200 pb-2">Appearance</h3>
            
            {/* Color */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">Color</label>
              <div className="flex flex-wrap gap-3 mb-4">
                {colorOptions.map((colorOption) => (
                  <button
                    key={colorOption.value}
                    onClick={() => setColor(colorOption.value)}
                    className={`rounded-lg transition-all hover:scale-105 ${
                      color === colorOption.value ? 'shadow-lg' : 'hover:shadow-md'
                    }`}
                    style={{ 
                      backgroundColor: colorOption.value,
                      width: '24px',
                      height: '24px',
                      border: color === colorOption.value ? '2px solid #374151' : '1px solid #d1d5db'
                    }}
                    title={colorOption.name}
                  />
                ))}
              </div>
              <input
                type="color"
                value={color}
                onChange={(e) => setColor(e.target.value)}
                className="w-full h-12 rounded-lg border-2 border-gray-300 cursor-pointer"
              />
            </div>

            {/* Preview */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">Preview</label>
              <div className="flex items-center gap-3 p-4 bg-gray-50 border border-gray-200 rounded-lg">
                <div className="milestone-marker" style={{ borderTopColor: color }}>
                  <div className="milestone-label" style={{ backgroundColor: color }}>
                    {title || 'Milestone Title'}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <DialogFooter className="gap-3 mt-6">
          <Button onClick={handleCancel} variant="outline">
            Cancel
          </Button>
          <Button 
            onClick={handleSave}
            disabled={!title.trim()}
          >
            {milestone ? 'Save Changes' : 'Create Milestone'}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}